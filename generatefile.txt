public function generateFiles(Request $request)
{
    // Mengambil data yang diterima dari form
    $namaTabel = $request->input('nama_tabel');
    $namaModel = $request->input('nama_model');
    $namaController = $request->input('nama_controller');
    $folderController = $request->input('folder_controller');
    // Ambil data kolom yang dibuat dari form
    $kolom = $request->input('nama_kolom');
    // Ambil data relasi dan acuan yang dibuat dari form
    $relasi = $request->input('relasi');
    $acuan = $request->input('acuan');

    // Lakukan logika pembuatan file-file di sini
    // Contoh, membuat migration
    $migrationContent = "<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class Create" . ucfirst($namaTabel) . "Table extends Migration
{
    public function up()
    {
        Schema::create('$namaTabel', function (Blueprint \$table) {
            \$table->id();
            \$table->timestamps();
            // Buat kolom berdasarkan data kolom yang diterima
            foreach ($kolom as \$namaKolom) {
                if (in_array(\$namaKolom, ['" . implode("', '", $acuan) . "'])) {
                    \$table->unsignedBigInteger('\${$namaKolom}_id');
                    \$table->foreign('\${$namaKolom}_id')->references('id')->on('\${$namaKolom}s')->onDelete('cascade');
                } else {
                    \$table->string(\$namaKolom);
                }
            }
        });
    }

    public function down()
    {
        Schema::dropIfExists('$namaTabel');
    }
}
";

    // Simpan migration ke dalam direktori migrations
    $migrationFileName = date('Y_m_d_His') . '_create_' . strtolower($namaTabel) . '_table.php';
    $migrationPath = database_path('migrations/' . $migrationFileName);
    File::put($migrationPath, $migrationContent);

    // Membuat model dengan relasi
    $modelContent = "<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class $namaModel extends Model
{
    protected \$fillable = [" . implode(', ', array_map(function($kolom) {
        return "'$kolom'";
    }, $kolom)) . "];

    // Definisikan relasi dengan model
    " . implode("\n", array_map(function($relasi) {
        return "public function $relasi()
    {
        return \$this->belongsTo($relasi::class);
    }";
    }, $relasi)) . "
}
";

    // Simpan model ke dalam direktori Models
    $modelFileName = $namaModel . '.php';
    $modelPath = app_path('Models/' . $modelFileName);
    File::put($modelPath, $modelContent);

    // Membuat controller dengan fungsi CRUD dan validasi
    $controllerContent = "<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\\$namaModel;
use Validator;

class $namaController extends Controller
{
    /**
     * Menampilkan semua data $namaTabel.
     */
    public function index()
    {
        $" . "data = $namaModel::all();
        return view('$folderController.index', compact('$data'));
    }

    /**
     * Menampilkan form untuk membuat data $namaTabel baru.
     */
    public function create()
    {
        return view('$folderController.create');
    }

    /**
     * Menyimpan data $namaTabel baru ke database.
     */
    public function store(Request $" . "request)
    {
        // Validasi input
        $" . "validator = Validator::make($" . "request->all(), [
            // Lakukan validasi sesuai dengan struktur kolom yang dibuat
        ]);

        if ($" . "validator->fails()) {
            return redirect()->back()->withErrors($" . "validator)->withInput();
        }

        // Simpan data $namaTabel ke database
        $namaModel::create($" . "request->all());

        return redirect()->route('$folderController.index')->with('success', '$namaTabel berhasil disimpan.');
    }

    /**
     * Menampilkan detail data $namaTabel.
     */
    public function show($" . "id)
    {
        $" . "data = $namaModel::findOrFail($" . "id);
        return view('$folderController.show', compact('$data'));
    }

    /**
     * Menampilkan form untuk mengedit data $namaTabel.
     */
    public function edit($" . "id)
    {
        $" . "data = $namaModel::findOrFail($" . "id);
        return view('$folderController.edit', compact('$data'));
    }

    /**
     * Menyimpan perubahan pada data $namaTabel ke database.
     */
    public function update(Request $" . "request, $" . "id)
    {
        // Validasi input
        $" . "validator = Validator::make($" . "request->all(), [
            // Lakukan validasi sesuai dengan struktur kolom yang dibuat
        ]);

        if ($" . "validator->fails()) {
            return redirect()->back()->withErrors($" . "validator)->withInput();
        }

        // Update data $namaTabel
        $" . "data = $namaModel::findOrFail($" . "id);
        $" . "data->update($" . "request->all());

        return redirect()->route('$folderController.index')->with('success', '$namaTabel berhasil diperbarui.');
    }

    /**
     * Menghapus data $namaTabel dari database.
     */
    public function destroy($" . "id)
    {
        $" . "data = $namaModel::findOrFail($" . "id);
        $" . "data->delete();

        return redirect()->route('$folderController.index')->with('success', '$namaTabel berhasil dihapus.');
    }
}
";

    // Simpan controller ke dalam direktori Controllers
    $controllerFileName = $namaController . '.php';
    $controllerPath = app_path('Http/Controllers/' . $controllerFileName);
    File::put($controllerPath, $controllerContent);

    // Membuat API controller
    $apiControllerContent = "<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\\$namaModel;
use Validator;

class {$namaController}API extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $" . "data = $namaModel::all();
        return response()->json($" . "data);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $" . "request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $" . "request)
    {
        // Validasi input
        $" . "validator = Validator::make($" . "request->all(), [
            // Lakukan validasi sesuai dengan struktur kolom yang dibuat
        ]);

        if ($" . "validator->fails()) {
            return response()->json(['error' => $" . "validator->errors()], 422);
        }

        // Simpan data $namaTabel ke database
        $" . "data = $namaModel::create($" . "request->all());

        return response()->json(['message' => '$namaTabel berhasil disimpan', 'data' => $" . "data], 201);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $" . "id
     * @return \Illuminate\Http\Response
     */
    public function show($" . "id)
    {
        $" . "data = $namaModel::findOrFail($" . "id);
        return response()->json($" . "data);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $" . "request
     * @param  int  $" . "id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $" . "request, $" . "id)
    {
        // Validasi input
        $" . "validator = Validator::make($" . "request->all(), [
            // Lakukan validasi sesuai dengan struktur kolom yang dibuat
        ]);

        if ($" . "validator->fails()) {
            return response()->json(['error' => $" . "validator->errors()], 422);
        }

        // Update data $namaTabel
        $" . "data = $namaModel::findOrFail($" . "id);
        $" . "data->update($" . "request->all());

        return response()->json(['message' => '$namaTabel berhasil diperbarui', 'data' => $" . "data]);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $" . "id
     * @return \Illuminate\Http\Response
     */
    public function destroy($" . "id)
    {
        $" . "data = $namaModel::findOrFail($" . "id);
        $" . "data->delete();

        return response()->json(['message' => '$namaTabel berhasil dihapus']);
    }
}
";

    // Simpan API controller ke dalam direktori Controllers/API
    $apiControllerFileName = "{$namaController}API.php";
    $apiControllerPath = app_path('Http/Controllers/API/' . $apiControllerFileName);
    File::put($apiControllerPath, $apiControllerContent);

    return response()->json(['message' => 'Files generated successfully']);
}
